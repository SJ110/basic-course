 1.程序的逻辑组织：存储器的组织方式是一维的存储空间，存储在其上的应用程序有一维和二维两种组织方式。

一维地址结构：程序的数据在经过遍历连接后程序一个连续的地址空间保存在主存中，确定程序在主存中的位置只需要一个指向该首址的指针即可。传统上采用这种组织方式.

二维地址结构：将程序划分为若干段，包括数据段，代码段，堆栈段等部分，每一段顺序的保存在存储器中，需要寻找到其中任何一段需要指向该信息的指针和整个段的偏移量。这样分段的有点在于可以实现程序的动态连接，执行时不一定需要程序的所有信息都调入主存。当需要时在通过请调策略将这些信息调入。降低了系统的开销。

2.虚拟存储器：这是为了解决内存空间不足问题而产生的。实现了多用户多任务的执行。  地址映射：处理机在执行指令时使用的是物理地址中存储的信息，而应用程序中是逻辑地址，需要降低至进行转换。   静态地址映射：在程序装入过程中随机进行的地址变换方式.     动态地址映射：在程序运行期间，随着每条指令的访问自动的连续的进行地址映射。

3.主存分配：  存储保护：为保证多个应用程序之间不互相影响，必须有硬件保证每个程序只能在给定的存储区域活动。常用的保护手段包括上下界防护和存储键防护。    主存管理存在的问题： 在系统运行时，会从低地址到高地址存放所需要运行的程序到主存中，当一些程序运行完毕后，会从主存释放，形成一些空闲的地址区。当再次有程序存放到主存时就需要合理的分配这些空闲区。 常用的放置策略，首次匹配法，最佳匹配法，最坏匹配法。     
  首次匹配法：空闲地址区从低地址到高地址排序，程序地址到来时按序选择能够放入其中的空闲区。 再更新空闲区的队列。                           
  最佳匹配法：空闲区按照空间大小顺序排列，每次程序地址到来时会按序选择能够装入的空闲区，装入之后此块空闲区可能有剩余，因此需要更新队列的顺序。     
  最坏匹配法：空闲区按最大到最小顺序排列，程序地址先使用空闲块大的空间，放入之后由于空间有剩余，需要更新队列。   
  碎片拼接技术：长期使用过后主存中的空闲碎片会越来越多导致放不下一个完整的程序，此时可以通过碎片拼接技术时空闲区合并。
4.页式存储管理：  为了解决主存中碎片多的问题，可以将程序分页分别保存，当需要时在调入主存使用:正在页式存储系统中程序被放置在不同的块中，这些块所存放的位置不同，因此需要进行动态地址映射。动态地址映射的策略在组成原理的虚拟存储器中有详细讲解，可以参考慕课。页面的淘汰机制用到了几种置换算法  LRU（最久未使用），FIFO（先来先服务）OPT(最佳算法）  缺页中断率与命中率一致。
5.断页式存储：在页式存储的基础上，将程序分段，也是存储每一块大小一致，段页式存储每一段大小不同，每一段中保存了页表的长度和页表首址，可以进行访问。方法与页式存储类似。